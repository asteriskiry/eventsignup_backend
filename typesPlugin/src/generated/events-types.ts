/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/event/edit": {
    /** Edit an existing event. */
    put: operations["editEvent"];
  };
  "/api/archive/event": {
    /** Archive an event. Admin user only. */
    put: operations["archiveEvent"];
  };
  "/api/admin/users/edit/": {
    /** Edit an existing users. */
    put: operations["editUser"];
  };
  "/api/signup/{eventId}/add": {
    /** Signup for an event (i.e. add a participant). */
    post: operations["addParticipantToEvent"];
  };
  "/api/event/create": {
    /** Create a new event. */
    post: operations["createEvent"];
  };
  "/api/event/banner/add": {
    /** Upload a new banner image. */
    post: operations["addBannerImg"];
  };
  "/api/auth/authenticate": {
    /** Try to authenticate a user. */
    post: operations["login"];
  };
  "/api/admin/users/add": {
    /** Add a new user to the system. */
    post: operations["addUser"];
  };
  "/api/signup/{eventId}": {
    /** Get an event for signup purposes. */
    get: operations["getEventForSignup"];
  };
  "/api/signup/upcomingEvents/{days}": {
    /** Get a list of upcoming events at to selected days. */
    get: operations["getUpcomingEvents"];
  };
  "/api/event/participants/{eventId}": {
    /** Get participants for an event by event's id. */
    get: operations["getParticipants"];
  };
  "/api/event/get/{eventId}": {
    /** Get an event by its id. */
    get: operations["getEvent"];
  };
  "/api/event/banner/{fileName}": {
    /** Get file path for the uploaded banner image. */
    get: operations["getBannerImagePath"];
  };
  "/api/event/banner/get/{fileName}": {
    /** Get a banner image. */
    get: operations["getBannerImage"];
  };
  "/api/event/all/{user}": {
    /** Get all events for a user. */
    get: operations["getAllEventsForUser"];
  };
  "/api/auth/creds/{id}": {
    /** Get needed login data so client side scripts can work. */
    get: operations["getCredentials"];
  };
  "/api/archive/get/{userId}": {
    /** Get all archived events for a specific user sorted by date archived (desc). Admin user only. */
    get: operations["getAllArchivedEventsForUser"];
  };
  "/api/archive/get/all": {
    /** Get all archived events. Admin user only. */
    get: operations["getAllArchiveEvents"];
  };
  "/api/admin/users/all": {
    /** Get all non-admin users for admin view. */
    get: operations["getAllNonAdminUsers"];
  };
  "/api/admin/participants/{eventId}": {
    /** Gets all participants for a specific event. */
    get: operations["getAllParticipantsForEvent"];
  };
  "/api/admin/participants/all": {
    /** Gets all participants for admin view. */
    get: operations["getAllParticipants"];
  };
  "/api/admin/event/{userId}": {
    /** Get all events of a specific user to admin view. */
    get: operations["getAllEventsForUser_1"];
  };
  "/api/admin/event/all": {
    /** Gets all events for admin view. */
    get: operations["getAllEvents"];
  };
  "/api/signup/cancel/{eventId}/{participantId}": {
    /** Cancel participation to an event. */
    delete: operations["removeParticipantFromEvent"];
  };
  "/api/event/remove/{eventId}": {
    /** Delete an event. */
    delete: operations["removeEvent"];
  };
  "/api/archive/remove": {
    /** Remove a single archived event. Admin user only. */
    delete: operations["removeArchivedEvent"];
  };
  "/api/archive/remove/all": {
    /** Delete archived events older than set date. Admin user only. */
    delete: operations["removeArchivedEvents"];
  };
  "/api/admin/users/delete/{userId}": {
    /** Deletes an user by their id. */
    delete: operations["deleteUser"];
  };
  "/api/admin/users/delete/all": {
    /** Delete ALL non-admin users. */
    delete: operations["deleteAllNonAdminUsers"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Event: {
      id?: string;
      name: string;
      /** Format: date-time */
      startDate: string;
      place: string;
      description: string;
      form: components["schemas"]["Form"];
      owner?: string;
      /** Format: date-time */
      endDate?: string;
      /** Format: int32 */
      minParticipants?: number;
      /** Format: int32 */
      maxParticipants?: number;
      /** Format: date-time */
      signupStarts?: string;
      /** Format: date-time */
      signupEnds?: string;
      quotas?: (components["schemas"]["Quota"])[];
      /** Format: double */
      price?: number;
      bannerImg?: string;
      otherData?: {
        [key: string]: Record<string, never> | undefined;
      };
      metaData?: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    Form: {
      /** Format: date-time */
      dateCreated?: string;
      /** @description generated by formGenerator */
      formData: {
        [key: string]: Record<string, never> | undefined;
      };
      userCreated?: string;
    };
    Quota: {
      group?: string;
      quota?: string;
    };
    ArchiveEventRequest: {
      archivedEventId?: string;
    };
    GrantedAuthority: {
      authority?: string;
    };
    User: {
      id?: string;
      firstName: string;
      lastName: string;
      email: string;
      password: string;
      username: string;
      /** Format: date-time */
      expirationDate?: string;
      /** @enum {string} */
      userRole?: "ROLE_ADMIN" | "ROLE_USER" | "ADMIN" | "USER";
      locked?: boolean;
      enabled?: boolean;
      accountNonExpired?: boolean;
      accountNonLocked?: boolean;
      credentialsNonExpired?: boolean;
      authorities?: (components["schemas"]["GrantedAuthority"])[];
      admin?: boolean;
    };
    Participant: {
      id?: string;
      name: string;
      email: string;
      event: string;
      /** @enum {string} */
      gender?: "M" | "F" | "X";
      /** @enum {string} */
      mealChoice?: "meat" | "vegetarian";
      drinkChoice?: {
        [key: string]: string | undefined;
      };
      belongsToQuota?: string;
      isMember?: boolean;
      hasPaid?: boolean;
      /** Format: date-time */
      signupTime?: string;
      otherData?: {
        [key: string]: Record<string, never> | undefined;
      };
      metaData?: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    ApplicationContext: {
      parent?: components["schemas"]["ApplicationContext"];
      id?: string;
      displayName?: string;
      applicationName?: string;
      /** Format: int64 */
      startupDate?: number;
      autowireCapableBeanFactory?: components["schemas"]["AutowireCapableBeanFactory"];
      environment?: components["schemas"]["Environment"];
      /** Format: int32 */
      beanDefinitionCount?: number;
      beanDefinitionNames?: (string)[];
      parentBeanFactory?: components["schemas"]["BeanFactory"];
      classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        parent?: {
          name?: string;
          registeredAsParallelCapable?: boolean;
          unnamedModule?: {
            name?: string;
            classLoader?: {
              name?: string;
              registeredAsParallelCapable?: boolean;
              definedPackages?: ({
                  name?: string;
                  annotations?: (Record<string, never>)[];
                  declaredAnnotations?: (Record<string, never>)[];
                  sealed?: boolean;
                  specificationTitle?: string;
                  specificationVersion?: string;
                  specificationVendor?: string;
                  implementationTitle?: string;
                  implementationVersion?: string;
                  implementationVendor?: string;
                })[];
              defaultAssertionStatus?: boolean;
            };
            descriptor?: {
              open?: boolean;
              automatic?: boolean;
            };
            named?: boolean;
            annotations?: (Record<string, never>)[];
            declaredAnnotations?: (Record<string, never>)[];
            packages?: (string)[];
            layer?: Record<string, never>;
          };
          definedPackages?: ({
              name?: string;
              annotations?: (Record<string, never>)[];
              declaredAnnotations?: (Record<string, never>)[];
              sealed?: boolean;
              specificationTitle?: string;
              specificationVersion?: string;
              specificationVendor?: string;
              implementationTitle?: string;
              implementationVersion?: string;
              implementationVendor?: string;
            })[];
          defaultAssertionStatus?: boolean;
        };
        unnamedModule?: {
          name?: string;
          classLoader?: {
            name?: string;
            registeredAsParallelCapable?: boolean;
            definedPackages?: ({
                name?: string;
                annotations?: (Record<string, never>)[];
                declaredAnnotations?: (Record<string, never>)[];
                sealed?: boolean;
                specificationTitle?: string;
                specificationVersion?: string;
                specificationVendor?: string;
                implementationTitle?: string;
                implementationVersion?: string;
                implementationVendor?: string;
              })[];
            defaultAssertionStatus?: boolean;
          };
          descriptor?: {
            open?: boolean;
            automatic?: boolean;
          };
          named?: boolean;
          annotations?: (Record<string, never>)[];
          declaredAnnotations?: (Record<string, never>)[];
          packages?: (string)[];
          layer?: Record<string, never>;
        };
        definedPackages?: ({
            name?: string;
            annotations?: (Record<string, never>)[];
            declaredAnnotations?: (Record<string, never>)[];
            sealed?: boolean;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
          })[];
        defaultAssertionStatus?: boolean;
      };
    };
    AutowireCapableBeanFactory: Record<string, never>;
    BeanFactory: Record<string, never>;
    Environment: {
      activeProfiles?: (string)[];
      defaultProfiles?: (string)[];
    };
    RedirectView: {
      applicationContext?: components["schemas"]["ApplicationContext"];
      servletContext?: {
        classLoader?: {
          name?: string;
          registeredAsParallelCapable?: boolean;
          definedPackages?: ({
              name?: string;
              annotations?: (Record<string, never>)[];
              declaredAnnotations?: (Record<string, never>)[];
              sealed?: boolean;
              specificationTitle?: string;
              specificationVersion?: string;
              specificationVendor?: string;
              implementationTitle?: string;
              implementationVersion?: string;
              implementationVendor?: string;
            })[];
          defaultAssertionStatus?: boolean;
        };
        /** Format: int32 */
        majorVersion?: number;
        /** Format: int32 */
        minorVersion?: number;
        contextPath?: string;
        initParameterNames?: Record<string, never>;
        /** Format: int32 */
        effectiveMajorVersion?: number;
        /** Format: int32 */
        effectiveMinorVersion?: number;
        /** @deprecated */
        servlets?: Record<string, never>;
        /** @deprecated */
        servletNames?: Record<string, never>;
        serverInfo?: string;
        attributeNames?: Record<string, never>;
        servletContextName?: string;
        servletRegistrations?: {
          [key: string]: ({
            mappings?: (string)[];
            runAsRole?: string;
            name?: string;
            className?: string;
            initParameters?: {
              [key: string]: string | undefined;
            };
          }) | undefined;
        };
        filterRegistrations?: {
          [key: string]: ({
            servletNameMappings?: (string)[];
            urlPatternMappings?: (string)[];
            name?: string;
            className?: string;
            initParameters?: {
              [key: string]: string | undefined;
            };
          }) | undefined;
        };
        sessionCookieConfig?: {
          domain?: string;
          name?: string;
          path?: string;
          comment?: string;
          httpOnly?: boolean;
          /** Format: int32 */
          maxAge?: number;
          secure?: boolean;
        };
        sessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
        jspConfigDescriptor?: {
          jspPropertyGroups?: ({
              buffer?: string;
              elIgnored?: string;
              pageEncoding?: string;
              scriptingInvalid?: string;
              includePreludes?: (string)[];
              includeCodas?: (string)[];
              defaultContentType?: string;
              urlPatterns?: (string)[];
              deferredSyntaxAllowedAsLiteral?: string;
              trimDirectiveWhitespaces?: string;
              errorOnUndeclaredNamespace?: string;
              isXml?: string;
            })[];
          taglibs?: ({
              taglibURI?: string;
              taglibLocation?: string;
            })[];
        };
        virtualServerName?: string;
        /** Format: int32 */
        sessionTimeout?: number;
        defaultSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
        effectiveSessionTrackingModes?: ("COOKIE" | "URL" | "SSL")[];
        requestCharacterEncoding?: string;
        responseCharacterEncoding?: string;
      };
      contentType?: string;
      requestContextAttribute?: string;
      staticAttributes?: {
        [key: string]: Record<string, never> | undefined;
      };
      exposePathVariables?: boolean;
      exposeContextBeansAsAttributes?: boolean;
      exposedContextBeanNames?: (string)[];
      beanName?: string;
      url?: string;
      contextRelative?: boolean;
      http10Compatible?: boolean;
      exposeModelAttributes?: boolean;
      encodingScheme?: string;
      /** @enum {string} */
      statusCode?: "100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED";
      expandUriTemplateVariables?: boolean;
      propagateQueryParams?: boolean;
      hosts?: (string)[];
      propagateQueryProperties?: boolean;
      redirectView?: boolean;
      attributes?: {
        [key: string]: string | undefined;
      };
      attributesCSV?: string;
      attributesMap?: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    AuthCredentialsRequest: {
      username?: string;
      password?: string;
    };
    SignupEvent: {
      id?: string;
      name?: string;
      /** Format: date-time */
      startDate?: string;
      place?: string;
      description?: string;
      form?: components["schemas"]["Form"];
      /** Format: date-time */
      endDate?: string;
      /** Format: double */
      price?: number;
      bannerImg?: string;
    };
    AuthCredentialsResponse: {
      isAdmin?: boolean;
      token?: string;
    };
    ArchivedEvent: {
      id?: string;
      originalEvent?: components["schemas"]["Event"];
      /** Format: date-time */
      dateArchived?: string;
      /** Format: int64 */
      numberOfParticipants?: number;
      originalOwner?: string;
    };
    ArchivedEventResponse: {
      eventOwner?: string;
      events?: (components["schemas"]["ArchivedEvent"])[];
    };
    RemoveArchivedEventsRequest: {
      /** Format: date-time */
      dateLimit?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  editEvent: {
    /** Edit an existing event. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event"];
      };
    };
    responses: {
      /** @description Event editing successful. */
      200: never;
      /** @description Unauthorized. */
      401: never;
      /** @description Unable to edit. Old event not found. */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  archiveEvent: {
    /** Archive an event. Admin user only. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveEventRequest"];
      };
    };
    responses: {
      /** @description Event archiving successful. */
      200: never;
      /** @description Unauthorized. */
      401: never;
      /** @description Unable to archive event. Event was not found. */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  editUser: {
    /** Edit an existing users. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description User editing successful. */
      200: never;
      /** @description Unauthenticated. */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  addParticipantToEvent: {
    /** Signup for an event (i.e. add a participant). */
    parameters: {
      path: {
        eventId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Participant"];
      };
    };
    responses: {
      /** @description Signup successful. */
      200: never;
      /** @description Event not found. */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createEvent: {
    /** Create a new event. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event"];
      };
    };
    responses: {
      /** @description Event creation successful. */
      200: never;
      /** @description Unauthorized. */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  addBannerImg: {
    /** Upload a new banner image. */
    requestBody: {
      content: {
        "application/json": {
          /** Format: int32 */
          short?: number;
          char?: string;
          /** Format: int32 */
          int?: number;
          /** Format: int64 */
          long?: number;
          /** Format: float */
          float?: number;
          /** Format: double */
          double?: number;
          direct?: boolean;
          readOnly?: boolean;
        };
      };
    };
    responses: {
      /** @description Redirect to /api/event/banner/{fileName}. */
      303: {
        content: {
          "*/*": components["schemas"]["RedirectView"];
        };
      };
      /** @description Unauthenticated */
      401: {
        content: {
          "*/*": components["schemas"]["RedirectView"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Invalid image file/file not an image. */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Target directory creation failed. */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  login: {
    /** Try to authenticate a user. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthCredentialsRequest"];
      };
    };
    responses: {
      /** @description Authentication was successful. Do a get request to get data. */
      303: {
        content: {
          "*/*": Record<string, never>;
        };
      };
      /** @description Authentication was unsuccessful. */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  addUser: {
    /** Add a new user to the system. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description New user adding successful. */
      200: never;
      /** @description Unauthenticated. */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getEventForSignup: {
    /** Get an event for signup purposes. */
    parameters: {
        /** @description Event's id */
      path: {
        eventId: string;
      };
    };
    responses: {
      /** @description The event requested. */
      200: {
        content: {
          "application/json": components["schemas"]["SignupEvent"];
        };
      };
      /** @description Event was already held. */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Signup not started/signup already ended/event full. See the message in response for details. */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getUpcomingEvents: {
    /** Get a list of upcoming events at to selected days. */
    parameters: {
        /** @description How many days into the future events are wanted. */
      path: {
        days: string;
      };
    };
    responses: {
      /** @description The events requested. */
      200: {
        content: {
          "application/json": components["schemas"]["SignupEvent"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getParticipants: {
    /** Get participants for an event by event's id. */
    parameters: {
        /** @description Event's id. */
      path: {
        eventId: string;
      };
    };
    responses: {
      /** @description Participants of the requested event. List can be empty. */
      200: {
        content: {
          "application/json": components["schemas"]["Participant"];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "*/*": (components["schemas"]["Participant"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getEvent: {
    /** Get an event by its id. */
    parameters: {
        /** @description Requested events id. */
      path: {
        eventId: string;
      };
    };
    responses: {
      /** @description Requested event. */
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "*/*": components["schemas"]["Event"];
        };
      };
      /** @description Event not found. */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getBannerImagePath: {
    /** Get file path for the uploaded banner image. */
    parameters: {
        /** @description Filename generated when saving an image. */
      path: {
        fileName: string;
      };
    };
    responses: {
      /** @description Json: {'fileName': fileName} */
      200: {
        content: {
          "*/*": {
            [key: string]: string | undefined;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getBannerImage: {
    /** Get a banner image. */
    parameters: {
        /** @description File's name we want. */
      path: {
        fileName: string;
      };
    };
    responses: {
      /** @description The file requested. */
      200: {
        content: {
          "image/png": (string)[];
          "image/jpeg": (string)[];
          "image/gif": (string)[];
        };
      };
      /** @description File not found. */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllEventsForUser: {
    /** Get all events for a user. */
    parameters: {
      path: {
        user: string;
      };
    };
    responses: {
      /** @description All events of the user. List can be empty. */
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "*/*": (components["schemas"]["Event"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCredentials: {
    /** Get needed login data so client side scripts can work. */
    parameters: {
        /** @description Id in cache the data was stored to (created during the post call). */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description The requested data. */
      200: {
        content: {
          "application/json": components["schemas"]["AuthCredentialsResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllArchivedEventsForUser: {
    /** Get all archived events for a specific user sorted by date archived (desc). Admin user only. */
    parameters: {
        /** @description User's id whose data is wanted. */
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description All archived events for the requested user. List can be empty. */
      200: {
        content: {
          "application/json": components["schemas"]["ArchivedEvent"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": (components["schemas"]["ArchivedEvent"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllArchiveEvents: {
    /** Get all archived events. Admin user only. */
    responses: {
      /** @description All archived events. List can be empty. */
      200: {
        content: {
          "application/json": components["schemas"]["ArchivedEventResponse"];
        };
      };
      /** @description Unauthorized. */
      401: {
        content: {
          "*/*": (components["schemas"]["ArchivedEventResponse"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllNonAdminUsers: {
    /** Get all non-admin users for admin view. */
    responses: {
      /** @description All participants in the specific event. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Unauthenticated. */
      401: {
        content: {
          "*/*": (components["schemas"]["User"])[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllParticipantsForEvent: {
    /** Gets all participants for a specific event. */
    parameters: {
        /** @description Event's id. */
      path: {
        eventId: string;
      };
    };
    responses: {
      /** @description All participants in the specific event. */
      200: {
        content: {
          "application/json": components["schemas"]["Participant"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllParticipants: {
    /** Gets all participants for admin view. */
    responses: {
      /** @description All participants in all events. */
      200: {
        content: {
          "application/json": components["schemas"]["Participant"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllEventsForUser_1: {
    /** Get all events of a specific user to admin view. */
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description All events for the specific user. */
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllEvents: {
    /** Gets all events for admin view. */
    responses: {
      /** @description All events. */
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeParticipantFromEvent: {
    /** Cancel participation to an event. */
    parameters: {
        /** @description Event's id where to cancel from. */
        /** @description Participant's id (who's cancelling). */
      path: {
        eventId: string;
        participantId: string;
      };
    };
    responses: {
      /** @description Cancellation successful. */
      200: never;
      /** @description Event not found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeEvent: {
    /** Delete an event. */
    parameters: {
        /** @description Event's id. */
      path: {
        eventId: string;
      };
    };
    responses: {
      /** @description Event deleted successfully. */
      200: never;
      /** @description Unauthorized. */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeArchivedEvent: {
    /** Remove a single archived event. Admin user only. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveEventRequest"];
      };
    };
    responses: {
      /** @description Delete was successful. */
      200: never;
      /** @description Unauthorized */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeArchivedEvents: {
    /** Delete archived events older than set date. Admin user only. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveArchivedEventsRequest"];
      };
    };
    responses: {
      /** @description Delete was successful. */
      200: never;
      /** @description Unauthorized */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteUser: {
    /** Deletes an user by their id. */
    parameters: {
        /** @description Id of the user to delete. */
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description Delete was successful. */
      200: never;
      /** @description Unauthenticated. */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteAllNonAdminUsers: {
    /** Delete ALL non-admin users. */
    responses: {
      /** @description Delete was successful. */
      200: never;
      /** @description Unauthenticated. */
      401: never;
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          "*/*": string;
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
