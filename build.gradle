plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.springdoc.openapi-gradle-plugin" version "1.7.0"
    id "com.github.node-gradle.node" version "7.0.2"
    id "com.diffplug.spotless" version "6.25.0"
    id 'idea' // comment out if you don't use IntelliJ IDEA
    //id 'eclipse' // uncomment if you use Eclipse
}

group = 'fi.asteriski'
version = '1.0'
java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

node {
    download = true
    nodeProjectDir = file("${project.projectDir}/typesPlugin")
}

openApi {
    apiDocsUrl.set("http://localhost:8080/v1/api-docs")
    customBootRun {
        args = ["--spring.profiles.active=special"]
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.16.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'org.keycloak:keycloak-spring-boot-starter:23.0.4'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.8.3'
    implementation 'org.flywaydb:flyway-maven-plugin:10.21.0'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:6.2.1'
    testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
    maxHeapSize = '4G'
}

bootJar {
    archiveFileName = 'eventsignup.jar'
}

tasks.register('generateTsTypes', NpxTask) {
    dependsOn('generateOpenApiDocs')
    command = "openapi-typescript"
    args = ["${project.projectDir}/build/openapi.json", "--output", "${project.projectDir}/typesPlugin/src/generated/events-types.ts"]
}

tasks.register('generateTypesVersionNumber', NpmTask) {
    def tag = System.getenv("GIT_TAG")
    if (tag && tag =~ '^[0-9]+\\.[0-9]+\\.[0-9]+$') {
        args = ["version", tag.substring(1)]
    } else {
        args = ["version", new Date().format('yyyyMMdd') + "." + new Date().format('HHmm') + ".0"]
    }
}

tasks.register('publishTypesPlugin', NpmTask) {
    args = ["publish"]
}

tasks.named("forkedSpringBootRun") {
    mustRunAfter("nodeSetup")
}

tasks.register("bootRunDev") {
    group = "application"
    description = "Runs the Spring Boot application with the dev profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "dev")
            systemProperty("DB_HOST", "localhost")
        }
    }
    finalizedBy("bootRun")
}

spotless {
    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore', '*.properties'

        trimTrailingWhitespace()
        endWithNewline()
    }
    java {
        importOrder()
        removeUnusedImports()
        palantirJavaFormat('2.47.0').formatJavadoc(true)
    }
}
